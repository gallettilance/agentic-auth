sequenceDiagram
    participant U as User
    participant CUI as Chat UI<br/>(Port 5001)
    participant AS as Auth Server<br/>(Port 8002)
    participant LS as Llama Stack<br/>(Port 8321)
    participant AA as Auth Agent<br/>(in Llama Stack)
    participant MCP as MCP Server<br/>(Port 8001)
    participant AD as Admin Dashboard<br/>(Port 5002)

    Note over U,AD: üîê Authorization Flow - Token Exchange Process

    Note over U,MCP: üìã Initial Request with Insufficient Scopes

    U->>CUI: Send message: "Execute command 'ls -la'"
    CUI->>LS: POST /create_turn with Bearer token
    LS->>AA: Process request with current token
    AA->>AA: Analyze request - needs execute_command tool
    AA->>MCP: Call execute_command tool with JWT token
    
    Note over MCP,MCP: üîç MCP Server Authorization Check
    MCP->>MCP: Validate JWT token signature ‚úÖ
    MCP->>MCP: Check token expiry ‚úÖ
    MCP->>MCP: Verify required scopes for execute_command
    MCP->>MCP: Current token scopes: ["read:files"]
    MCP->>MCP: Required scopes: ["execute:commands"]
    MCP->>MCP: ‚ùå Insufficient scopes
    
    MCP-->>AA: Return authorization error
    AA-->>LS: Tool execution failed: insufficient scopes
    LS-->>CUI: Stream error response
    CUI->>CUI: Parse authorization error
    CUI-->>U: Show "üîê Authorization Required" popup<br/>Tool: execute_command<br/>Required scope: execute:commands<br/>‚ö†Ô∏è This will grant command execution access

    Note over U,AS: üë§ User Approval Process

    U->>CUI: Click "‚úÖ Approve" in popup
    CUI->>AS: POST /api/upgrade-scope
    Note over AS: Request Body:<br/>{"required_scopes": ["execute:commands"]<br/>"user_session": "session_token"<br/>"tool_name": "execute_command"}
    
    AS->>AS: Extract user info from session
    AS->>AS: Check user permissions and policies
    AS->>AS: evaluate_approval_policy(user_email, scopes)
    AS->>AS: Load scope policies from database
    
    alt Auto-approved scope (low risk)
        AS->>AS: Scope "execute:commands" marked as auto-approved
        AS->>AS: Generate new MCP token with additional scopes
        Note over AS: New Token Scopes:<br/>["read:files", "execute:commands"]
        AS->>AS: Store new token in database
        AS-->>CUI: Success: new token with scopes
        CUI->>CUI: Update token in session storage
        CUI->>CUI: Hide approval popup
        CUI-->>U: Show "‚úÖ Auto-approved! Retrying..."
        
        Note over U,MCP: üîÑ Automatic Retry with New Token
        CUI->>CUI: Auto-retry original request
        CUI->>LS: POST /create_turn with upgraded token
        LS->>AA: Process with new token context
        AA->>MCP: Retry execute_command with upgraded token
        MCP->>MCP: Validate new token
        MCP->>MCP: Check scopes: ["read:files", "execute:commands"] ‚úÖ
        MCP->>MCP: Execute command tool
        MCP-->>AA: Return command results
        AA-->>LS: Tool execution successful
        LS-->>CUI: Stream successful response
        CUI-->>U: Display command output
        
    else Manual approval required (high risk)
        AS->>AS: Scope requires manual approval
        AS->>AS: Create approval request in database
        AS->>AS: Generate approval request ID
        AS-->>CUI: Pending: approval request created
        CUI->>CUI: Hide approval popup
        CUI-->>U: Show "üìã Approval requested - waiting for admin"
        
        Note over U,AD: üëë Admin Approval Process
        
        U->>AD: Admin accesses dashboard
        AD->>AS: GET /api/admin/pending-approvals
        AS-->>AD: Return pending approval requests
        AD-->>U: Show approval request:<br/>User: user@example.com<br/>Scope: execute:commands<br/>Tool: execute_command<br/>Risk Level: HIGH
        
        U->>AD: Click "‚úÖ Approve Request"
        AD->>AS: POST /api/admin/approve/{request_id}
        AS->>AS: Update approval request status
        AS->>AS: Generate new MCP token with approved scopes
        AS->>AS: Store new token in database
        AS-->>AD: Success: approval granted
        AD-->>U: Show "Request approved successfully!"
        
        Note over U,MCP: üîÑ Token Update Detection & Retry
        
        CUI->>CUI: checkForTokenUpdates() (polling every 5 seconds)
        CUI->>AS: GET /api/check-token-update
        AS->>AS: Check if user's token has been updated
        AS-->>CUI: Token updated: true + new scopes
        CUI->>CUI: Update token in session
        CUI-->>U: Show "‚úÖ New permissions approved! Auto-retrying..."
        
        CUI->>CUI: autoRetryPendingRequests()
        CUI->>LS: POST /create_turn with upgraded token
        LS->>AA: Process with new token context
        AA->>MCP: Retry execute_command with upgraded token
        MCP->>MCP: Validate new token and scopes ‚úÖ
        MCP->>MCP: Execute command tool
        MCP-->>AA: Return command results
        AA-->>LS: Tool execution successful
        LS-->>CUI: Stream successful response
        CUI-->>U: Display command output
    end

    Note over U,AD: üîÑ Token Management & Lifecycle

    Note over AS,AS: Token Generation Details
    AS->>AS: JWT payload includes:<br/>‚Ä¢ user_id<br/>‚Ä¢ email<br/>‚Ä¢ scopes array<br/>‚Ä¢ expiry timestamp<br/>‚Ä¢ issued_at timestamp
    AS->>AS: Sign with private key
    AS->>AS: Store in database with user mapping

    Note over CUI,CUI: Token Storage & Usage
    CUI->>CUI: Store token in session storage
    CUI->>CUI: Include in all Llama Stack requests
    CUI->>CUI: Monitor for token updates
    CUI->>CUI: Handle token refresh automatically

    Note over MCP,MCP: Token Validation Process
    MCP->>MCP: Verify JWT signature with public key
    MCP->>MCP: Check token expiry
    MCP->>MCP: Extract scopes from token
    MCP->>MCP: Match required scopes for tool
    MCP->>MCP: Allow or deny tool execution

    Note over U,AD: üîê Security Features

    rect rgb(255, 240, 240)
        Note over AS: Auth Server Security
        Note over AS: ‚Ä¢ Scope-based access control
        Note over AS: ‚Ä¢ Policy-driven approvals
        Note over AS: ‚Ä¢ Token lifecycle management
        Note over AS: ‚Ä¢ Admin approval workflows
        Note over AS: ‚Ä¢ Audit logging
    end

    rect rgb(240, 255, 240)
        Note over CUI: Client Security
        Note over CUI: ‚Ä¢ Secure token storage
        Note over CUI: ‚Ä¢ Automatic token refresh
        Note over CUI: ‚Ä¢ User consent workflows
        Note over CUI: ‚Ä¢ Retry mechanisms
    end

    rect rgb(240, 240, 255)
        Note over MCP: MCP Server Security
        Note over MCP: ‚Ä¢ Independent token validation
        Note over MCP: ‚Ä¢ Scope-based tool access
        Note over MCP: ‚Ä¢ No trusted internal access
        Note over MCP: ‚Ä¢ Comprehensive audit logging
    end 