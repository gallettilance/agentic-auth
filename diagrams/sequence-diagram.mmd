sequenceDiagram
    participant U as User/Browser
    participant CUI as Chat UI<br/>(Port 5001)
    participant AS as Auth Server<br/>(Port 8002)
    participant LS as Llama Stack<br/>(Port 8321)
    participant AA as Auth Agent<br/>(in Llama Stack)
    participant MCP as MCP Server<br/>(Port 8001)
    participant K8S as Kubernetes API<br/>(Underlying Service)
    participant AD as Admin Dashboard<br/>(Port 5002)
    participant GA as Google OAuth

    Note over U,GA: 🚀 Initial Application Access & Discovery

    U->>CUI: Access http://localhost:5001
    CUI->>CUI: Check session cookies
    alt No valid session
        CUI->>AS: GET /api/user-status (check auth)
        AS-->>CUI: 401 Unauthorized
        CUI-->>U: Show login.html
        
        Note over U,GA: 🔐 OAuth Authentication Flow
        U->>CUI: Click "Login with Google"
        CUI->>AS: GET /auth/authorize?client_id=chat-ui&redirect_uri=...
        AS->>GA: Redirect to Google OAuth
        GA-->>U: Google login page
        U->>GA: Enter credentials
        GA->>AS: Redirect to /auth/callback with auth code
        AS->>GA: Exchange auth code for user info
        GA-->>AS: User profile data
        AS->>AS: Create/update user in database
        AS->>AS: Generate session token
        AS->>AS: Generate initial Llama Stack token (empty scopes)
        AS->>CUI: Redirect to /callback with auth code
        CUI->>AS: POST /auth/token (exchange code for tokens)
        AS-->>CUI: Session token + Llama Stack token
        CUI->>CUI: Set auth_session + llama_stack_token cookies
        CUI->>CUI: Store tokens in session
        CUI-->>U: Redirect to chat interface
    else Valid session exists
        CUI->>AS: GET /api/user-status (verify session)
        AS-->>CUI: User info + authentication status
        CUI-->>U: Show chat.html with user info
    end

    Note over U,MCP: 🎯 Chat Interface Initialization

    U->>CUI: Page loads (DOMContentLoaded)
    CUI->>CUI: loadChatHistory()
    CUI->>CUI: GET /api/chat-history
    CUI->>LS: Get session messages
    LS-->>CUI: Historical messages
    CUI->>CUI: refreshTokenDashboard()
    CUI->>CUI: GET /api/token-info
    CUI-->>U: Display chat with history + token status

    Note over U,MCP: 💬 User Interaction & Client-Side Token Validation

    U->>CUI: Type message: "List files in /tmp"
    CUI->>CUI: POST /api/chat (send message)
    CUI->>LS: Create agent turn with message
    LS->>AA: Process user message
    AA->>AA: Analyze request - requires list_files tool
    
    Note over AA,CUI: 🔐 Client-Side Token & Scope Validation (NEW)
    AA->>CUI: Request token validation for list_files
    CUI->>CUI: Validate current JWT token locally
    CUI->>CUI: Check token expiry and required scopes
    
    alt Token valid and has required scope
        CUI-->>AA: Token validation success
        AA->>AA: Prepare MCP headers with validated token
        AA->>MCP: Call list_files tool with JWT token
        
        Note over MCP,K8S: 🔄 MCP Server Passthrough Authentication (NEW)
        MCP->>MCP: No local token validation - passthrough mode
        MCP->>K8S: Forward request to underlying service with token
        K8S->>K8S: Validate token against its own auth system
        K8S-->>MCP: Success: file list results
        MCP-->>AA: Passthrough: file list results
        AA-->>LS: Tool execution successful
        LS-->>CUI: Stream response with results
        CUI-->>U: Display file listing
        
    else Token lacks required scope
        CUI->>CUI: Scope validation failed locally
        CUI-->>AA: Authorization error: insufficient scope
        AA-->>LS: Return structured authorization error
        LS-->>CUI: Stream error response
        CUI->>CUI: Parse authorization error
        CUI-->>U: Show "🔐 Authorization required" with approve button
        
    else Token expired or invalid
        CUI->>CUI: Token validation failed locally
        CUI-->>AA: Token error: expired/invalid
        AA-->>LS: Return token error
        LS-->>CUI: Stream error response
        CUI->>CUI: Parse token error
        CUI-->>U: Show "🔑 Token expired - please re-authenticate"
    end

    Note over U,AS: 🔄 Human-Approved Token Exchange (NEW)

    U->>CUI: Click "Request Approval" button
    CUI->>CUI: Show approval popup modal
    CUI-->>U: Display popup: "Request additional permissions?"<br/>Tool: list_files<br/>Required scope: read:files<br/>⚠️ This will grant file access
    
    Note over U,CUI: 👤 Human Approval Required
    U->>CUI: Click "✅ Approve" in popup
    CUI->>CUI: POST /api/request-scope-upgrade
    CUI->>AS: POST /api/upgrade-scope with required scopes
    AS->>AS: evaluate_approval_policy(user_email, scopes)
    AS->>AS: Check scope policies in database
    
    alt Auto-approved scopes (e.g., list_files)
        AS->>AS: Mark scopes as auto-approved
        AS->>AS: Generate new MCP token with additional scopes
        AS->>AS: Update user's token cache
        AS-->>CUI: Success: new token with scopes
        CUI->>CUI: Update token in session/cookies
        CUI->>CUI: Hide approval popup
        CUI->>CUI: Auto-retry original request
        CUI->>LS: Retry agent turn
        LS->>AA: Re-process with new token
        AA->>CUI: Validate new token locally
        CUI->>CUI: Token validation success
        CUI-->>AA: Token validation success
        AA->>MCP: Retry tool call with upgraded token
        MCP->>K8S: Forward request with new token
        K8S->>K8S: Validate new token - scopes ✓
        K8S-->>MCP: Success: tool results
        MCP-->>AA: Passthrough: tool results
        AA-->>LS: Tool execution successful
        LS-->>CUI: Stream successful response
        CUI-->>U: Show "✅ Auto-approved! Retrying..." then results
    else Requires manual approval (e.g., execute_command)
        AS->>AS: Create approval request in database
        AS->>AS: Generate approval request ID
        AS-->>CUI: Pending: approval request created
        CUI->>CUI: Hide approval popup
        CUI-->>U: Show "📋 Approval requested - waiting for admin"
    end

    Note over U,K8S: 🔧 Advanced Tool Operations - Service Auth Errors

    U->>CUI: Type: "Get Kubernetes pods"
    CUI->>LS: Create agent turn
    LS->>AA: Process k8s request
    AA->>CUI: Request token validation for k8s_get_pods
    CUI->>CUI: Validate token locally - scopes ✓
    CUI-->>AA: Token validation success
    AA->>MCP: Call k8s_get_pods tool with JWT token
    
    Note over MCP,K8S: 🔄 Service-Level Auth Errors Surface Up (NEW)
    MCP->>MCP: No local token validation - passthrough mode
    MCP->>K8S: Forward request to Kubernetes API
    K8S->>K8S: Validate token against K8s RBAC
    
    alt K8s auth success
        K8S-->>MCP: Success: pod list
        MCP-->>AA: Passthrough: pod list
        AA-->>LS: Tool execution successful
        LS-->>CUI: Stream pod results
        CUI-->>U: Display Kubernetes pods
    else K8s auth failure
        K8S-->>MCP: 403 Forbidden: insufficient RBAC permissions
        MCP-->>AA: Passthrough: K8s auth error
        AA-->>LS: Tool execution failed: service auth error
        LS-->>CUI: Stream service error
        CUI->>CUI: Parse service auth error
        CUI-->>U: Show "🔐 Kubernetes permission denied"<br/>Show approval popup for k8s:admin scope
        
        Note over U,CUI: 👤 Human Approval for Service Access
        U->>CUI: Click "✅ Approve K8s Admin Access" in popup
        CUI->>AS: POST /api/upgrade-scope (k8s:admin)
        AS->>AS: Create high-risk approval request
        AS-->>CUI: Pending: requires admin approval
        CUI-->>U: Show "📋 Admin approval required for K8s access"
    end

    Note over U,AD: 👑 Admin Dashboard & Approval Management

    U->>AD: Access http://localhost:5002 (admin user)
    AD->>AS: GET /api/user-status (verify admin)
    AS-->>AD: User info + admin status
    AD->>AS: GET /api/admin/pending-approvals
    AS-->>AD: List of pending approval requests
    AD-->>U: Show dashboard with pending approvals

    U->>AD: Click "✅ Approve" on k8s:admin request
    AD->>AS: POST /api/admin/approve/{request_id}
    AS->>AS: Update approval request status
    AS->>AS: Generate new MCP token with k8s:admin scope
    AS->>AS: Update user's token cache
    AS-->>AD: Success: approval granted
    AD-->>U: Show "Request approved successfully!"

    Note over U,MCP: 🔄 Token Update Detection & Auto-Retry

    CUI->>CUI: checkForTokenUpdates() (every 5 seconds)
    CUI->>CUI: GET /api/check-token-update
    CUI->>AS: Check for token updates
    AS->>AS: Check if user's token has been updated
    AS-->>CUI: Token updated: true + new scopes
    CUI->>CUI: Show "✅ New permissions approved! Auto-retrying..."
    CUI->>CUI: autoRetryPendingRequests()
    CUI->>LS: Retry failed requests with new token
    LS->>AA: Re-process with upgraded token
    AA->>CUI: Validate new token locally
    CUI->>CUI: Token validation success - k8s:admin ✓
    CUI-->>AA: Token validation success
    AA->>MCP: Retry k8s tool calls
    MCP->>K8S: Forward request with new token
    K8S->>K8S: Validate new token - k8s:admin ✓
    K8S-->>MCP: Success: pod list with admin permissions
    MCP-->>AA: Passthrough: pod list
    AA-->>LS: Tool execution successful
    LS-->>CUI: Stream successful response
    CUI-->>U: Show successful Kubernetes operation

    Note over U,AD: 🔍 Token & User Management

    U->>AD: View "Token Management" section
    AD->>AS: GET /api/admin/users
    AS-->>AD: List of users + their tokens
    AD-->>U: Show user token status

    U->>AD: Click "🔄 Refresh Tools"
    AD->>AS: GET /api/tools
    AS->>MCP: Fetch available tools via MCP protocol
    MCP-->>AS: Tool list + descriptions
    AS-->>AD: Tools + user access levels
    AD-->>U: Updated tools list

    Note over U,GA: 🔄 Session Management & Cleanup

    CUI->>CUI: Session timeout check (periodic)
    alt Session expired
        CUI->>AS: GET /api/user-status
        AS-->>CUI: 401 Session expired
        CUI->>CUI: Clear local session
        CUI-->>U: Redirect to login
    else Session valid
        CUI->>AS: Refresh session
        AS-->>CUI: Session refreshed
    end

    Note over U,MCP: 🧹 Cleanup & Maintenance

    CUI->>CUI: cleanupOldPendingRequests() (every minute)
    CUI->>CUI: Remove requests older than 10 minutes
    
    AS->>AS: Database cleanup (periodic)
    AS->>AS: Remove expired approval requests
    AS->>AS: Clean up old sessions

    Note over U,GA: 🔐 Security Features

    rect rgb(255, 240, 240)
        Note over MCP: MCP Server Security
        Note over MCP: • Local JWT validation (no auth server calls)
        Note over MCP: • Scope-based access control
        Note over MCP: • Tool-level permission checks
        Note over MCP: • Audit logging of all tool calls
    end

    rect rgb(240, 255, 240)
        Note over AS: Auth Server Security
        Note over AS: • Google OAuth integration
        Note over AS: • JWT token generation & validation
        Note over AS: • Role-based access control
        Note over AS: • Approval workflow management
        Note over AS: • Session management
    end

    rect rgb(240, 240, 255)
        Note over CUI: Chat UI Security
        Note over CUI: • Secure cookie handling
        Note over CUI: • Token refresh management
        Note over CUI: • Authorization error handling
        Note over CUI: • Auto-retry with upgraded tokens
    end 